// This Pine Script™ code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// © clintondews

//@version=5
indicator("RSI + Bollinger Band Cross" , overlay = true)

//-----Inputs----//

//global inputs
var g_global = "Global Settings"
useTrend = input.bool(title = "Use EMA Trend for signal" , defval = false, group = g_global , tooltip = "use EMA trend for signal")
useSTrend = input.bool(title = "Use Super Trend for signal" , defval = false, group = g_global , tooltip = "use Super trend for signal")
usefullbodytrend = input.bool(title = "Whole body for trend" , tooltip = "check if whole body is below/above the trend line" , defval = true , group = g_global)
useBB = input.bool(title = "Use BollingerBands for signal" , defval = true, group = g_global , tooltip = "use  BollingerBand cross for signal")
useRSI = input.bool(title = "Use RSI for signal" , defval = true, group = g_global , tooltip = "use RSI cross for signal")
sPrice =  input(close, title='Price Source')
buySellAlert = input.bool(title = "Enable Alerts", defval = true , group = g_global , tooltip = "enable buy , sell entry alerts")

//RSI Inputs
var g_rsi = "RSI Settings"
rsiLengthInput = input.int(14, minval=1, title="RSI Length", group= g_rsi)
rsiSourceInput = input.source(close, "Source", group= g_rsi)
showDivergence = input.bool(false, title="Show Divergence", group= g_rsi)
rsiCrossOverValue = input.int(70, "RSI Cross Upper Value" ,  group = g_rsi)
rsiCrossUnderValue = input.int(30, "RSI Cross Lower Value" ,  group = g_rsi)

lookbackRight = input.int(5, "Div Lookback Right" ,  group = g_rsi , tooltip = "Divergence Lookback")
lookbackLeft = input.int(5, "Div Lookback Left" ,  group = g_rsi , tooltip = "Divergence Lookback")
rangeUpper = input.int(60, "Div upper limit" ,  group = g_rsi , tooltip = "RSI Divergence Upper Range")
rangeLower = input.int(5, "Div lower limit" ,  group = g_rsi , tooltip = "RSI Divergence Lover Range")

//Super Trend Inputs
var g_super = "Super Trend Settings"
showSuperTrend = input.bool(title = "Show SuperTrend" , defval = false , group = g_super)
atrPeriod = input.int(21,    "ATR Length", minval = 1 , group = g_super)
factor =    input.float(2.5, "Factor",     minval = 0.01, step = 0.01 , group = g_super)

//BB inputs
var g_bb    = "Bollinger Band Settings"
showBB = input.bool(title="Show Bollinger Bands", defval=true, group=g_bb)
showBBMid = input.bool(title="Show Mid Band", defval=false, group=g_bb)
fillcolor = input.bool(title="Fill BG", defval=false, group=g_bb)
bb_length = input.int(title="Length", defval=20, minval=1, group=g_bb)
maType = input.string("SMA", "Basis MA Type", options = ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group=g_bb)
bbsrc = input(close, title="Source", group=g_bb)
mult = input.float(2.0, minval=0.001, maxval=50, title="StdDev", group=g_bb)
bboffset = input.int(0, "Offset", minval = -500, maxval = 500, group=g_bb)

//EMA inputs
var g_ema    = "EMA Settings"
showEMA = input.bool(title="Show EMA", defval=true, group=g_ema)
emaSrc = input(close, title="Source", group=g_ema)
emaLength    = input.int(title="EMA Length", defval=200, tooltip="Length of the EMA filter", group=g_ema)
emaoffset = input.int(title="Offset", defval=0, minval=-500, maxval=500, group=g_ema)
emaPlot = ta.ema(emaSrc, emaLength)

//--------------Polttings--------------//
//Plot EMA
plot(showEMA ? emaPlot : na , title="EMA", color=color.rgb(0, 0, 0), offset=emaoffset)

//Plot BB
ma(source, bb_length, _type) =>
    switch _type
        "SMA" => ta.sma(source, bb_length)
        "EMA" => ta.ema(source, bb_length)
        "SMMA (RMA)" => ta.rma(source, bb_length)
        "WMA" => ta.wma(source, bb_length)
        "VWMA" => ta.vwma(source, bb_length)

basis = ma(bbsrc, bb_length, maType)
dev = mult * ta.stdev(bbsrc, bb_length)
upper = basis + dev
lower = basis - dev
plot(showBB and showBBMid ? basis : na ,  "Basis", color=#ffc400, offset = bboffset)
p1 = plot(showBB ? upper : na , "Upper", color=#003cff, offset = bboffset)
p2 = plot(showBB ? lower : na , "Lower", color=#003cff, offset = bboffset)

fill(p1, p2, title = "Background", color= fillcolor ? color.rgb(33, 124, 243, 95) : na)


//------------ super trend -------------//

[supertrend, direction] = ta.supertrend(factor, atrPeriod)

supertrend := barstate.isfirst ? na : supertrend
upTrend =    plot(direction < 0 and showSuperTrend ? supertrend : na, "Up Trend",   color = color.green, style = plot.style_linebr)
downTrend =  plot(direction < 0 or not showSuperTrend ? na : supertrend, "Down Trend", color = color.red,   style = plot.style_linebr)
bodyMiddle = plot(barstate.isfirst ? na : (open + close) / 2, "Body Middle",display = display.none)

fill(bodyMiddle, upTrend,   color.new(color.green, 90), fillgaps = false)
fill(bodyMiddle, downTrend, color.new(color.red,   90), fillgaps = false)

superTUp = direction < 0
superTDown = direction >= 0

//----------- RSI --------------//
up = ta.rma(math.max(ta.change(rsiSourceInput), 0), rsiLengthInput)
down = ta.rma(-math.min(ta.change(rsiSourceInput), 0), rsiLengthInput)
rsi = down == 0 ? 100 : up == 0 ? 0 : 100 - (100 / (1 + up / down))

rsiCrossOver = ta.crossover(rsi , rsiCrossOverValue)
rsiCrossUnder = ta.crossunder(rsi , rsiCrossUnderValue)

ema = ta.ema(emaSrc, emaLength)

bbCrossOver = ta.crossover(sPrice, upper)
bbCrossUnder = ta.crossunder(sPrice, lower)


buysignal = ((close > ema and (open >= ema or not usefullbodytrend) and (superTUp or not useSTrend)) or not useTrend) and (rsiCrossUnder or not useRSI) and (bbCrossUnder or not useBB)
sellsignal = ((close < ema and (open <= ema or not usefullbodytrend) and (superTDown or not useSTrend)) or not useTrend) and (rsiCrossOver or not useRSI) and (bbCrossOver or not useBB)

plotshape(buysignal, style=shape.labelup, color=color.teal , location=location.belowbar, size=size.tiny, title="Long Label", text= "Buy", textcolor=color.white)
plotshape(sellsignal, style=shape.labeldown, color=color.rgb(255, 79, 120) , location=location.abovebar, size=size.tiny, title="Short Label", text= "Sell", textcolor=color.white)


// Divergence
// lookbackRight = 5
// lookbackLeft = 5
// rangeUpper = 60
// rangeLower = 5
bearColor = color.rgb(255, 72, 0)
bullColor = color.rgb(0, 192, 26)
textColor = color.rgb(48, 48, 48)
noneColor = color.new(color.white, 100)

plFound = na(ta.pivotlow(rsi, lookbackLeft, lookbackRight)) ? false : true
phFound = na(ta.pivothigh(rsi, lookbackLeft, lookbackRight)) ? false : true
_inRange(cond) =>
	bars = ta.barssince(cond == true)
	rangeLower <= bars and bars <= rangeUpper

//------------------------------------------------------------------------------
// Regular Bullish
// rsi: Higher Low

rsiHL = rsi[lookbackRight] > ta.valuewhen(plFound, rsi[lookbackRight], 1) and _inRange(plFound[1])

// Price: Lower Low

priceLL = low[lookbackRight] < ta.valuewhen(plFound, low[lookbackRight], 1)
bullCondAlert = priceLL and rsiHL and plFound
bullCond = showDivergence and bullCondAlert

plot(
     plFound ? low[lookbackRight] : na,
     offset=-lookbackRight,
     title="Regular Bullish",
     linewidth=2,
     color=(bullCond ? bullColor : noneColor)
     )

plotshape(
	 bullCond ? low[lookbackRight]*0.9985 : na,
	 offset=-lookbackRight,
	 title="Regular Bullish Label",
	//  text=" Bull ",
	 size=size.tiny,
	 style=shape.triangleup,
	 location=location.absolute,
	 color=bullColor,
	 textcolor=textColor
	 )

//------------------------------------------------------------------------------
// Regular Bearish
// rsi: Lower High

rsiLH = rsi[lookbackRight] < ta.valuewhen(phFound, rsi[lookbackRight], 1) and _inRange(phFound[1])

// Price: Higher High

priceHH = high[lookbackRight] > ta.valuewhen(phFound, high[lookbackRight], 1)

bearCondAlert = priceHH and rsiLH and phFound
bearCond = showDivergence and bearCondAlert

plot(
	 phFound ? high[lookbackRight] : na,
	 offset=-lookbackRight,
	 title="Regular Bearish",
	 linewidth=2,
	 color=(bearCond ? bearColor : noneColor)
	 )

plotshape(
	 bearCond ? high[lookbackRight]*1.0015 : na,
	 offset=-lookbackRight,
	 title="Regular Bearish Label",
	//  text=" Bear ",
	 size=size.tiny,
	 style=shape.triangledown,
	 location=location.absolute,
	 color=bearColor,
	 textcolor=textColor
	 )

/// Alert

alertcondition((buysignal or sellsignal) and buySellAlert, title = "buy/sell signal", message = "buy or sell entry")
// alertcondition(sellsignal and buySellAlert, title = "sellsignal", message = "sell entry")

