// This source code is subject to the terms of the Mozilla Public License 2.0 at https://mozilla.org/MPL/2.0/
// Â© clinton_dews

//@version=5
indicator('Scalping Macro Trend Scanner', overlay=true)

//global inputs
var g_global = "Global Settings"
usefullbodytrend = input.bool(title = "Whole body for trend" , tooltip = "check if whole body is below/above the trend line" , defval = true , group = g_global)
useTrend = input.bool(title = "Use Trend for signal" , defval = true, group = g_global , tooltip = "use EMA / SMA trend for signal")
useMacd = input.bool(title = "Use MACD for signal" , defval = true, group = g_global , tooltip = "use MACD trend for signal")
useSTrend = input.bool(title = "Use SuperTrend for signal" , defval = false, group = g_global , tooltip = "use Super trend for signal")
showBarColors = input.bool(title = "Change bar colors" , defval = false, group = g_global , tooltip = "change candle colors")
buySellAlert = input.bool(title = "Enable Alerts", defval = true , group = g_global , tooltip = "enable buy , sell entry alerts")


//Super Trend Inputs
var g_super = "Super Trend"
showSuperTrend = input.bool(title = "Show SuperTrend" , defval = false , group = g_super)
atrPeriod = input.int(10,    "ATR Length", minval = 1 , group = g_super)
factor =    input.float(3.0, "Factor",     minval = 0.01, step = 0.01 , group = g_super)

//BB inputs
var g_bb    = "Bollinger Bands"
showBB = input.bool(title="Show Bollinger Bands", defval=true, group=g_bb)
showBBMid = input.bool(title="Show Mid Band", defval=false, group=g_bb)
fillcolor = input.bool(title="Fill BG", defval=false, group=g_bb)
bb_length = input.int(title="Length", defval=20, minval=1, group=g_bb)
maType = input.string("SMA", "Basis MA Type", options = ["SMA", "EMA", "SMMA (RMA)", "WMA", "VWMA"], group=g_bb)
bbsrc = input(close, title="Source", group=g_bb)
mult = input.float(2.0, minval=0.001, maxval=50, title="StdDev", group=g_bb)
bboffset = input.int(0, "Offset", minval = -500, maxval = 500, group=g_bb)

//MACD
// Getting inputs
var g_macd    = "MACD Filter"
fast_length = input(title = "Fast Length", defval = 26 , group=g_macd)
slow_length = input(title = "Slow Length", defval = 100 , group=g_macd)
MACDsrc = input(title = "Source", defval = close , group=g_macd)
signal_length = input.int(title = "Signal Smoothing",  minval = 1, maxval = 50, defval = 9 , group=g_macd)
sma_source = input.string(title = "Oscillator MA Type",  defval = "EMA", options = ["SMA", "EMA"] , group=g_macd)
sma_signal = input.string(title = "Signal Line MA Type", defval = "EMA", options = ["SMA", "EMA"] , group=g_macd)
// Calculating
fast_ma = sma_source == "SMA" ? ta.sma(MACDsrc, fast_length) : ta.ema(MACDsrc, fast_length)
slow_ma = sma_source == "SMA" ? ta.sma(MACDsrc, slow_length) : ta.ema(MACDsrc, slow_length)
macd = fast_ma - slow_ma
signal = sma_signal == "SMA" ? ta.sma(macd, signal_length) : ta.ema(macd, signal_length)
hist = macd - signal

//EMA inputs
var g_ema    = "EMA Filter"
showEMA = input.bool(title="Show EMA", defval=true, group=g_ema)
emaSrc = input(close, title="Source", group=g_ema)
emaLength    = input.int(title="EMA Length", defval=200, tooltip="Length of the EMA filter", group=g_ema)
emaoffset = input.int(title="Offset", defval=0, minval=-500, maxval=500, group=g_ema)
emaPlot = ta.ema(emaSrc, emaLength)


// EMA cross vars and inputs 
// Variables
var ok = 0
var countBuy = 0
var countSell = 0
var g_ind    = "EMA Cross inputs"
src = input(close, title='OHLC Type', group=g_ind)
i_fastEMA = input(12, title='Fast EMA', group=g_ind)
i_slowEMA = input(25, title='Slow EMA', group=g_ind)
i_defEMA = input(25, title='Consolidated EMA', group=g_ind)

//--------------Polttings--------------//
//Plot EMA
plot(showEMA ? emaPlot : na , title="EMA", color=color.rgb(0, 0, 0), offset=emaoffset)

//Plot BB
ma(source, bb_length, _type) =>
    switch _type
        "SMA" => ta.sma(source, bb_length)
        "EMA" => ta.ema(source, bb_length)
        "SMMA (RMA)" => ta.rma(source, bb_length)
        "WMA" => ta.wma(source, bb_length)
        "VWMA" => ta.vwma(source, bb_length)

basis = ma(bbsrc, bb_length, maType)
dev = mult * ta.stdev(bbsrc, bb_length)
upper = basis + dev
lower = basis - dev
plot(showBB and showBBMid ? basis : na ,  "Basis", color=#ffc400, offset = bboffset)
p1 = plot(showBB ? upper : na , "Upper", color=#003cff, offset = bboffset)
p2 = plot(showBB ? lower : na , "Lower", color=#003cff, offset = bboffset)

fill(p1, p2, title = "Background", color= fillcolor ? color.rgb(33, 124, 243, 95) : na)


//------------ super trend -------------//

[supertrend, direction] = ta.supertrend(factor, atrPeriod)

supertrend := barstate.isfirst ? na : supertrend
upTrend =    plot(direction < 0 and showSuperTrend ? supertrend : na, "Up Trend",   color = color.green, style = plot.style_linebr)
downTrend =  plot(direction < 0 or not showSuperTrend ? na : supertrend, "Down Trend", color = color.red,   style = plot.style_linebr)
bodyMiddle = plot(barstate.isfirst ? na : (open + close) / 2, "Body Middle",display = display.none)

fill(bodyMiddle, upTrend,   color.new(color.green, 90), fillgaps = false)
fill(bodyMiddle, downTrend, color.new(color.red,   90), fillgaps = false)

superTUp = direction < 0
superTDown = direction >= 0


// Allow the option to show single or double EMA
i_bothEMAs = input(title='Show Both EMAs', defval=true)

// Define EMAs
v_fastEMA = ta.ema(src, i_fastEMA)
v_slowEMA = ta.ema(src, i_slowEMA)
v_biasEMA = ta.ema(src, i_defEMA)

// Color the EMAs
emaColor = v_fastEMA > v_slowEMA ? color.green : v_fastEMA < v_slowEMA ? color.red : #FF530D

// Plot EMAs
plot(i_bothEMAs ? na : v_biasEMA, color=emaColor, linewidth=3, title='Consolidated EMA')
plot(i_bothEMAs ? v_fastEMA : na, title='Fast EMA', color=emaColor)
plot(i_bothEMAs ? v_slowEMA : na, title='Slow EMA', color=emaColor)

// Colour the bars
buy = v_fastEMA > v_slowEMA
sell = v_fastEMA < v_slowEMA

if buy
    countBuy += 1
    countBuy

if buy
    countSell := 0
    countSell

if sell
    countSell += 1
    countSell

if sell
    countBuy := 0
    countBuy

 
ema = ta.ema(emaSrc, emaLength)
buysignal = countBuy < 2 and countBuy > 0 and countSell < 1 and buy and not buy[1] and ((close > ema and (open >= ema or not usefullbodytrend) and (superTUp or not useSTrend)) or not useTrend) and (hist >= 0 or not useMacd)
sellsignal = countSell > 0 and countSell < 2 and countBuy < 1 and sell and not sell[1] and ((close < ema and (open <= ema or not usefullbodytrend) and (superTDown or not useSTrend)) or not useTrend) and (hist < 0 or not useMacd)

barcolor(buysignal ? color.green : na)
barcolor(sellsignal ? color.red : na)

// Plot Bull/Bear

// plotshape(buysignal, title='Bull', text='Bull', style=shape.triangleup, location=location.belowbar, color=color.new(color.green, 0), textcolor=color.new(color.black, 0), size=size.tiny)
// plotshape(sellsignal, title='Bear', text='Bear', style=shape.triangledown, location=location.abovebar, color=color.new(color.red, 0), textcolor=color.new(color.black, 0), size=size.tiny)

plotshape(buysignal, style=shape.labelup, color=color.teal , location=location.belowbar, size=size.tiny, title="Long Label", text= "Buy", textcolor=color.white)
plotshape(sellsignal, style=shape.labeldown, color=color.rgb(255, 79, 120) , location=location.abovebar, size=size.tiny, title="Short Label", text= "Sell", textcolor=color.white)

bull = countBuy > 1
bear = countSell > 1

barcolor(bull and showBarColors ? color.green : na)
barcolor(bear and showBarColors ? color.red : na)

// Set Alerts

alertcondition(ta.crossover(v_fastEMA, v_slowEMA), title='Bullish EMA Cross', message='Bullish EMA crossover')
alertcondition(ta.crossunder(v_fastEMA, v_slowEMA), title='Bearish EMA Cross', message='Bearish EMA Crossover')

// Stoch RSI code

smoothK = input.int(3, 'K', minval=1)
smoothD = input.int(3, 'D', minval=1)
lengthRSI = input.int(14, 'RSI Length', minval=1)
lengthStoch = input.int(14, 'Stochastic Length', minval=1)

rsi1 = ta.rsi(src, lengthRSI)
k = ta.sma(ta.stoch(rsi1, rsi1, rsi1, lengthStoch), smoothK)
d = ta.sma(k, smoothD)

bandno0 = input.int(80, minval=1, title='Upper Band', group='Bands (change this instead of length in Style for Stoch RSI colour to work properly)')
bandno2 = input.int(50, minval=1, title='Middle Band', group='Bands (change this instead of length in Style for Stoch RSI colour to work properly)')
bandno1 = input.int(20, minval=1, title='Lower Band', group='Bands (change this instead of length in Style for Stoch RSI colour to work properly)')

// Alerts

crossoverAlertBgColourMidOnOff = input.bool(title='Crossover Alert Background Colour (Middle Level) [ON/OFF]', group='Crossover Alerts', defval=false)
crossoverAlertBgColourOBOSOnOff = input.bool(title='Crossover Alert Background Colour (OB/OS Level) [ON/OFF]', group='Crossover Alerts', defval=false)

crossoverAlertBgColourGreaterThanOnOff = input.bool(title='Crossover Alert >input [ON/OFF]', group='Crossover Alerts', defval=false)
crossoverAlertBgColourLessThanOnOff = input.bool(title='Crossover Alert <input [ON/OFF]', group='Crossover Alerts', defval=false)

maTypeChoice = input.string('EMA', title='MA Type', group='Moving Average', options=['EMA', 'WMA', 'SMA', 'None'])
maSrc = input.source(close, title='MA Source', group='Moving Average')
maLen = input.int(200, minval=1, title='MA Length', group='Moving Average')

maValue = if maTypeChoice == 'EMA'
    ta.ema(maSrc, maLen)
else if maTypeChoice == 'WMA'
    ta.wma(maSrc, maLen)
else if maTypeChoice == 'SMA'
    ta.sma(maSrc, maLen)
else
    0

crossupCHECK = maTypeChoice == 'None' or open > maValue and maTypeChoice != 'None'
crossdownCHECK = maTypeChoice == 'None' or open < maValue and maTypeChoice != 'None'

crossupalert = crossupCHECK and ta.crossover(k, d) and (k < bandno2 or d < bandno2)
crossdownalert = crossdownCHECK and ta.crossunder(k, d) and (k > bandno2 or d > bandno2)
crossupOSalert = crossupCHECK and ta.crossover(k, d) and (k < bandno1 or d < bandno1)
crossdownOBalert = crossdownCHECK and ta.crossunder(k, d) and (k > bandno0 or d > bandno0)

aboveBandalert = ta.crossunder(k, bandno0)
belowBandalert = ta.crossover(k, bandno1)

bgcolor(color=crossupalert and crossoverAlertBgColourMidOnOff ? #4CAF50 : crossdownalert and crossoverAlertBgColourMidOnOff ? #FF0000 : na, title='Crossover Alert Background Colour (Middle Level)', transp=70)
bgcolor(color=crossupOSalert and crossoverAlertBgColourOBOSOnOff ? #fbc02d : crossdownOBalert and crossoverAlertBgColourOBOSOnOff ? #000000 : na, title='Crossover Alert Background Colour (OB/OS Level)', transp=70)

bgcolor(color=aboveBandalert and crossoverAlertBgColourGreaterThanOnOff ? #ff0014 : crossdownalert and crossoverAlertBgColourMidOnOff ? #FF0000 : na, title='Crossover Alert - K > Upper level', transp=70)
bgcolor(color=belowBandalert and crossoverAlertBgColourLessThanOnOff ? #4CAF50 : crossdownalert and crossoverAlertBgColourMidOnOff ? #FF0000 : na, title='Crossover Alert - K < Lower level', transp=70)

alertcondition(crossupalert or crossdownalert, title='Stoch RSI Crossover', message='STOCH RSI CROSSOVER')

/// Alert

alertcondition((buysignal or sellsignal) and buySellAlert, title = "buy/sell signal", message = "buy or sell entry")
// alertcondition(sellsignal and buySellAlert, title = "sellsignal", message = "sell entry")


